//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Yusen.GExplorer.GyaoModel {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("GDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GDataSet : System.Data.DataSet {
        
        private GGenreDataTable tableGGenre;
        
        private GPackageDataTable tableGPackage;
        
        private GContentDataTable tableGContent;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GGenre"] != null)) {
                    base.Tables.Add(new GGenreDataTable(ds.Tables["GGenre"]));
                }
                if ((ds.Tables["GPackage"] != null)) {
                    base.Tables.Add(new GPackageDataTable(ds.Tables["GPackage"]));
                }
                if ((ds.Tables["GContent"] != null)) {
                    base.Tables.Add(new GContentDataTable(ds.Tables["GContent"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GGenreDataTable GGenre {
            get {
                return this.tableGGenre;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GPackageDataTable GPackage {
            get {
                return this.tableGPackage;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GContentDataTable GContent {
            get {
                return this.tableGContent;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            GDataSet cln = ((GDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["GGenre"] != null)) {
                    base.Tables.Add(new GGenreDataTable(ds.Tables["GGenre"]));
                }
                if ((ds.Tables["GPackage"] != null)) {
                    base.Tables.Add(new GPackageDataTable(ds.Tables["GPackage"]));
                }
                if ((ds.Tables["GContent"] != null)) {
                    base.Tables.Add(new GContentDataTable(ds.Tables["GContent"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableGGenre = ((GGenreDataTable)(base.Tables["GGenre"]));
            if ((initTable == true)) {
                if ((this.tableGGenre != null)) {
                    this.tableGGenre.InitVars();
                }
            }
            this.tableGPackage = ((GPackageDataTable)(base.Tables["GPackage"]));
            if ((initTable == true)) {
                if ((this.tableGPackage != null)) {
                    this.tableGPackage.InitVars();
                }
            }
            this.tableGContent = ((GContentDataTable)(base.Tables["GContent"]));
            if ((initTable == true)) {
                if ((this.tableGContent != null)) {
                    this.tableGContent.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableGGenre = new GGenreDataTable();
            base.Tables.Add(this.tableGGenre);
            this.tableGPackage = new GPackageDataTable();
            base.Tables.Add(this.tableGPackage);
            this.tableGContent = new GContentDataTable();
            base.Tables.Add(this.tableGContent);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGGenre() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGPackage() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGContent() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            GDataSet ds = new GDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void GGenreRowChangeEventHandler(object sender, GGenreRowChangeEvent e);
        
        public delegate void GPackageRowChangeEventHandler(object sender, GPackageRowChangeEvent e);
        
        public delegate void GContentRowChangeEventHandler(object sender, GContentRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GGenreDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGenreKey;
            
            private System.Data.DataColumn columnGenreName;
            
            private System.Data.DataColumn columnRootDirectory;
            
            private System.Data.DataColumn columnImageDirectory;
            
            private System.Data.DataColumn columnGenreColorRed;
            
            private System.Data.DataColumn columnGenreColorGreen;
            
            private System.Data.DataColumn columnGenreColorBlue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GGenreDataTable() {
                this.TableName = "GGenre";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GGenreDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GGenreDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreKeyColumn {
                get {
                    return this.columnGenreKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreNameColumn {
                get {
                    return this.columnGenreName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RootDirectoryColumn {
                get {
                    return this.columnRootDirectory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ImageDirectoryColumn {
                get {
                    return this.columnImageDirectory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreColorRedColumn {
                get {
                    return this.columnGenreColorRed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreColorGreenColumn {
                get {
                    return this.columnGenreColorGreen;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreColorBlueColumn {
                get {
                    return this.columnGenreColorBlue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GGenreRow this[int index] {
                get {
                    return ((GGenreRow)(this.Rows[index]));
                }
            }
            
            public event GGenreRowChangeEventHandler GGenreRowChanging;
            
            public event GGenreRowChangeEventHandler GGenreRowChanged;
            
            public event GGenreRowChangeEventHandler GGenreRowDeleting;
            
            public event GGenreRowChangeEventHandler GGenreRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGGenreRow(GGenreRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GGenreRow AddGGenreRow(int GenreKey, string GenreName, string RootDirectory, string ImageDirectory, byte GenreColorRed, byte GenreColorGreen, byte GenreColorBlue) {
                GGenreRow rowGGenreRow = ((GGenreRow)(this.NewRow()));
                rowGGenreRow.ItemArray = new object[] {
                        GenreKey,
                        GenreName,
                        RootDirectory,
                        ImageDirectory,
                        GenreColorRed,
                        GenreColorGreen,
                        GenreColorBlue};
                this.Rows.Add(rowGGenreRow);
                return rowGGenreRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GGenreRow FindByGenreKey(int GenreKey) {
                return ((GGenreRow)(this.Rows.Find(new object[] {
                            GenreKey})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GGenreDataTable cln = ((GGenreDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GGenreDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGenreKey = base.Columns["GenreKey"];
                this.columnGenreName = base.Columns["GenreName"];
                this.columnRootDirectory = base.Columns["RootDirectory"];
                this.columnImageDirectory = base.Columns["ImageDirectory"];
                this.columnGenreColorRed = base.Columns["GenreColorRed"];
                this.columnGenreColorGreen = base.Columns["GenreColorGreen"];
                this.columnGenreColorBlue = base.Columns["GenreColorBlue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGenreKey = new System.Data.DataColumn("GenreKey", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenreKey);
                this.columnGenreName = new System.Data.DataColumn("GenreName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenreName);
                this.columnRootDirectory = new System.Data.DataColumn("RootDirectory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRootDirectory);
                this.columnImageDirectory = new System.Data.DataColumn("ImageDirectory", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageDirectory);
                this.columnGenreColorRed = new System.Data.DataColumn("GenreColorRed", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenreColorRed);
                this.columnGenreColorGreen = new System.Data.DataColumn("GenreColorGreen", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenreColorGreen);
                this.columnGenreColorBlue = new System.Data.DataColumn("GenreColorBlue", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenreColorBlue);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnGenreKey}, true));
                this.columnGenreKey.AllowDBNull = false;
                this.columnGenreKey.Unique = true;
                this.columnGenreName.AllowDBNull = false;
                this.columnRootDirectory.AllowDBNull = false;
                this.columnImageDirectory.AllowDBNull = false;
                this.columnGenreColorRed.AllowDBNull = false;
                this.columnGenreColorGreen.AllowDBNull = false;
                this.columnGenreColorBlue.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GGenreRow NewGGenreRow() {
                return ((GGenreRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GGenreRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GGenreRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GGenreRowChanged != null)) {
                    this.GGenreRowChanged(this, new GGenreRowChangeEvent(((GGenreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GGenreRowChanging != null)) {
                    this.GGenreRowChanging(this, new GGenreRowChangeEvent(((GGenreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GGenreRowDeleted != null)) {
                    this.GGenreRowDeleted(this, new GGenreRowChangeEvent(((GGenreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GGenreRowDeleting != null)) {
                    this.GGenreRowDeleting(this, new GGenreRowChangeEvent(((GGenreRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGGenreRow(GGenreRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GDataSet ds = new GDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GGenreDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GPackageDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPackageKey;
            
            private System.Data.DataColumn columnGenreKey;
            
            private System.Data.DataColumn columnPackageTitle;
            
            private System.Data.DataColumn columnPackageCatch;
            
            private System.Data.DataColumn columnPackageText;
            
            private System.Data.DataColumn columnCreated;
            
            private System.Data.DataColumn columnLastModified;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPackageDataTable() {
                this.TableName = "GPackage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GPackageDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GPackageDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackageKeyColumn {
                get {
                    return this.columnPackageKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreKeyColumn {
                get {
                    return this.columnGenreKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackageTitleColumn {
                get {
                    return this.columnPackageTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackageCatchColumn {
                get {
                    return this.columnPackageCatch;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackageTextColumn {
                get {
                    return this.columnPackageText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastModifiedColumn {
                get {
                    return this.columnLastModified;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPackageRow this[int index] {
                get {
                    return ((GPackageRow)(this.Rows[index]));
                }
            }
            
            public event GPackageRowChangeEventHandler GPackageRowChanging;
            
            public event GPackageRowChangeEventHandler GPackageRowChanged;
            
            public event GPackageRowChangeEventHandler GPackageRowDeleting;
            
            public event GPackageRowChangeEventHandler GPackageRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGPackageRow(GPackageRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPackageRow AddGPackageRow(int PackageKey, int GenreKey, string PackageTitle, string PackageCatch, string PackageText, System.DateTime Created, System.DateTime LastModified) {
                GPackageRow rowGPackageRow = ((GPackageRow)(this.NewRow()));
                rowGPackageRow.ItemArray = new object[] {
                        PackageKey,
                        GenreKey,
                        PackageTitle,
                        PackageCatch,
                        PackageText,
                        Created,
                        LastModified};
                this.Rows.Add(rowGPackageRow);
                return rowGPackageRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPackageRow FindByPackageKey(int PackageKey) {
                return ((GPackageRow)(this.Rows.Find(new object[] {
                            PackageKey})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GPackageDataTable cln = ((GPackageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GPackageDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPackageKey = base.Columns["PackageKey"];
                this.columnGenreKey = base.Columns["GenreKey"];
                this.columnPackageTitle = base.Columns["PackageTitle"];
                this.columnPackageCatch = base.Columns["PackageCatch"];
                this.columnPackageText = base.Columns["PackageText"];
                this.columnCreated = base.Columns["Created"];
                this.columnLastModified = base.Columns["LastModified"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPackageKey = new System.Data.DataColumn("PackageKey", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageKey);
                this.columnGenreKey = new System.Data.DataColumn("GenreKey", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenreKey);
                this.columnPackageTitle = new System.Data.DataColumn("PackageTitle", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageTitle);
                this.columnPackageCatch = new System.Data.DataColumn("PackageCatch", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageCatch);
                this.columnPackageText = new System.Data.DataColumn("PackageText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageText);
                this.columnCreated = new System.Data.DataColumn("Created", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnLastModified = new System.Data.DataColumn("LastModified", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastModified);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPackageKey}, true));
                this.columnPackageKey.AllowDBNull = false;
                this.columnPackageKey.Unique = true;
                this.columnCreated.AllowDBNull = false;
                this.columnLastModified.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPackageRow NewGPackageRow() {
                return ((GPackageRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GPackageRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GPackageRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GPackageRowChanged != null)) {
                    this.GPackageRowChanged(this, new GPackageRowChangeEvent(((GPackageRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GPackageRowChanging != null)) {
                    this.GPackageRowChanging(this, new GPackageRowChangeEvent(((GPackageRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GPackageRowDeleted != null)) {
                    this.GPackageRowDeleted(this, new GPackageRowChangeEvent(((GPackageRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GPackageRowDeleting != null)) {
                    this.GPackageRowDeleting(this, new GPackageRowChangeEvent(((GPackageRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGPackageRow(GPackageRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GDataSet ds = new GDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GPackageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GContentDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnContentKey;
            
            private System.Data.DataColumn columnPackageKey;
            
            private System.Data.DataColumn columnGenreKey;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnSeriesNumber;
            
            private System.Data.DataColumn columnSubtitle;
            
            private System.Data.DataColumn columnSummaryHtml;
            
            private System.Data.DataColumn columnDurationValue;
            
            private System.Data.DataColumn columnDeadlineText;
            
            private System.Data.DataColumn columnCreated;
            
            private System.Data.DataColumn columnLastModified;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GContentDataTable() {
                this.TableName = "GContent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GContentDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GContentDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ContentKeyColumn {
                get {
                    return this.columnContentKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PackageKeyColumn {
                get {
                    return this.columnPackageKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GenreKeyColumn {
                get {
                    return this.columnGenreKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SeriesNumberColumn {
                get {
                    return this.columnSeriesNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SubtitleColumn {
                get {
                    return this.columnSubtitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SummaryHtmlColumn {
                get {
                    return this.columnSummaryHtml;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DurationValueColumn {
                get {
                    return this.columnDurationValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DeadlineTextColumn {
                get {
                    return this.columnDeadlineText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastModifiedColumn {
                get {
                    return this.columnLastModified;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GContentRow this[int index] {
                get {
                    return ((GContentRow)(this.Rows[index]));
                }
            }
            
            public event GContentRowChangeEventHandler GContentRowChanging;
            
            public event GContentRowChangeEventHandler GContentRowChanged;
            
            public event GContentRowChangeEventHandler GContentRowDeleting;
            
            public event GContentRowChangeEventHandler GContentRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGContentRow(GContentRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GContentRow AddGContentRow(int ContentKey, int PackageKey, int GenreKey, string Title, string SeriesNumber, string Subtitle, string SummaryHtml, System.TimeSpan DurationValue, string DeadlineText, System.DateTime Created, System.DateTime LastModified) {
                GContentRow rowGContentRow = ((GContentRow)(this.NewRow()));
                rowGContentRow.ItemArray = new object[] {
                        ContentKey,
                        PackageKey,
                        GenreKey,
                        Title,
                        SeriesNumber,
                        Subtitle,
                        SummaryHtml,
                        DurationValue,
                        DeadlineText,
                        Created,
                        LastModified};
                this.Rows.Add(rowGContentRow);
                return rowGContentRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GContentRow FindByContentKey(int ContentKey) {
                return ((GContentRow)(this.Rows.Find(new object[] {
                            ContentKey})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                GContentDataTable cln = ((GContentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new GContentDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContentKey = base.Columns["ContentKey"];
                this.columnPackageKey = base.Columns["PackageKey"];
                this.columnGenreKey = base.Columns["GenreKey"];
                this.columnTitle = base.Columns["Title"];
                this.columnSeriesNumber = base.Columns["SeriesNumber"];
                this.columnSubtitle = base.Columns["Subtitle"];
                this.columnSummaryHtml = base.Columns["SummaryHtml"];
                this.columnDurationValue = base.Columns["DurationValue"];
                this.columnDeadlineText = base.Columns["DeadlineText"];
                this.columnCreated = base.Columns["Created"];
                this.columnLastModified = base.Columns["LastModified"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContentKey = new System.Data.DataColumn("ContentKey", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnContentKey);
                this.columnPackageKey = new System.Data.DataColumn("PackageKey", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPackageKey);
                this.columnGenreKey = new System.Data.DataColumn("GenreKey", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenreKey);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnSeriesNumber = new System.Data.DataColumn("SeriesNumber", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesNumber);
                this.columnSubtitle = new System.Data.DataColumn("Subtitle", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubtitle);
                this.columnSummaryHtml = new System.Data.DataColumn("SummaryHtml", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSummaryHtml);
                this.columnDurationValue = new System.Data.DataColumn("DurationValue", typeof(System.TimeSpan), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDurationValue);
                this.columnDeadlineText = new System.Data.DataColumn("DeadlineText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeadlineText);
                this.columnCreated = new System.Data.DataColumn("Created", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnLastModified = new System.Data.DataColumn("LastModified", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastModified);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnContentKey}, true));
                this.columnContentKey.AllowDBNull = false;
                this.columnContentKey.Unique = true;
                this.columnCreated.AllowDBNull = false;
                this.columnLastModified.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GContentRow NewGContentRow() {
                return ((GContentRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GContentRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(GContentRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GContentRowChanged != null)) {
                    this.GContentRowChanged(this, new GContentRowChangeEvent(((GContentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GContentRowChanging != null)) {
                    this.GContentRowChanging(this, new GContentRowChangeEvent(((GContentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GContentRowDeleted != null)) {
                    this.GContentRowDeleted(this, new GContentRowChangeEvent(((GContentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GContentRowDeleting != null)) {
                    this.GContentRowDeleting(this, new GContentRowChangeEvent(((GContentRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGContentRow(GContentRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GDataSet ds = new GDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GContentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GGenreRow : System.Data.DataRow {
            
            private GGenreDataTable tableGGenre;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GGenreRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGGenre = ((GGenreDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GenreKey {
                get {
                    return ((int)(this[this.tableGGenre.GenreKeyColumn]));
                }
                set {
                    this[this.tableGGenre.GenreKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenreName {
                get {
                    return ((string)(this[this.tableGGenre.GenreNameColumn]));
                }
                set {
                    this[this.tableGGenre.GenreNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RootDirectory {
                get {
                    return ((string)(this[this.tableGGenre.RootDirectoryColumn]));
                }
                set {
                    this[this.tableGGenre.RootDirectoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageDirectory {
                get {
                    return ((string)(this[this.tableGGenre.ImageDirectoryColumn]));
                }
                set {
                    this[this.tableGGenre.ImageDirectoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte GenreColorRed {
                get {
                    return ((byte)(this[this.tableGGenre.GenreColorRedColumn]));
                }
                set {
                    this[this.tableGGenre.GenreColorRedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte GenreColorGreen {
                get {
                    return ((byte)(this[this.tableGGenre.GenreColorGreenColumn]));
                }
                set {
                    this[this.tableGGenre.GenreColorGreenColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte GenreColorBlue {
                get {
                    return ((byte)(this[this.tableGGenre.GenreColorBlueColumn]));
                }
                set {
                    this[this.tableGGenre.GenreColorBlueColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GPackageRow : System.Data.DataRow {
            
            private GPackageDataTable tableGPackage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GPackageRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGPackage = ((GPackageDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackageKey {
                get {
                    return ((int)(this[this.tableGPackage.PackageKeyColumn]));
                }
                set {
                    this[this.tableGPackage.PackageKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GenreKey {
                get {
                    try {
                        return ((int)(this[this.tableGPackage.GenreKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GenreKey\' in table \'GPackage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPackage.GenreKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackageTitle {
                get {
                    try {
                        return ((string)(this[this.tableGPackage.PackageTitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PackageTitle\' in table \'GPackage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPackage.PackageTitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackageCatch {
                get {
                    try {
                        return ((string)(this[this.tableGPackage.PackageCatchColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PackageCatch\' in table \'GPackage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPackage.PackageCatchColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PackageText {
                get {
                    try {
                        return ((string)(this[this.tableGPackage.PackageTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PackageText\' in table \'GPackage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGPackage.PackageTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((System.DateTime)(this[this.tableGPackage.CreatedColumn]));
                }
                set {
                    this[this.tableGPackage.CreatedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastModified {
                get {
                    return ((System.DateTime)(this[this.tableGPackage.LastModifiedColumn]));
                }
                set {
                    this[this.tableGPackage.LastModifiedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenreKeyNull() {
                return this.IsNull(this.tableGPackage.GenreKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenreKeyNull() {
                this[this.tableGPackage.GenreKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackageTitleNull() {
                return this.IsNull(this.tableGPackage.PackageTitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackageTitleNull() {
                this[this.tableGPackage.PackageTitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackageCatchNull() {
                return this.IsNull(this.tableGPackage.PackageCatchColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackageCatchNull() {
                this[this.tableGPackage.PackageCatchColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackageTextNull() {
                return this.IsNull(this.tableGPackage.PackageTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackageTextNull() {
                this[this.tableGPackage.PackageTextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GContentRow : System.Data.DataRow {
            
            private GContentDataTable tableGContent;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GContentRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGContent = ((GContentDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContentKey {
                get {
                    return ((int)(this[this.tableGContent.ContentKeyColumn]));
                }
                set {
                    this[this.tableGContent.ContentKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PackageKey {
                get {
                    try {
                        return ((int)(this[this.tableGContent.PackageKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PackageKey\' in table \'GContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGContent.PackageKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GenreKey {
                get {
                    try {
                        return ((int)(this[this.tableGContent.GenreKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'GenreKey\' in table \'GContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGContent.GenreKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableGContent.TitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Title\' in table \'GContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGContent.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesNumber {
                get {
                    try {
                        return ((string)(this[this.tableGContent.SeriesNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SeriesNumber\' in table \'GContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGContent.SeriesNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subtitle {
                get {
                    try {
                        return ((string)(this[this.tableGContent.SubtitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Subtitle\' in table \'GContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGContent.SubtitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SummaryHtml {
                get {
                    try {
                        return ((string)(this[this.tableGContent.SummaryHtmlColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SummaryHtml\' in table \'GContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGContent.SummaryHtmlColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.TimeSpan DurationValue {
                get {
                    try {
                        return ((System.TimeSpan)(this[this.tableGContent.DurationValueColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DurationValue\' in table \'GContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGContent.DurationValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeadlineText {
                get {
                    try {
                        return ((string)(this[this.tableGContent.DeadlineTextColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DeadlineText\' in table \'GContent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGContent.DeadlineTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    return ((System.DateTime)(this[this.tableGContent.CreatedColumn]));
                }
                set {
                    this[this.tableGContent.CreatedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastModified {
                get {
                    return ((System.DateTime)(this[this.tableGContent.LastModifiedColumn]));
                }
                set {
                    this[this.tableGContent.LastModifiedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPackageKeyNull() {
                return this.IsNull(this.tableGContent.PackageKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPackageKeyNull() {
                this[this.tableGContent.PackageKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenreKeyNull() {
                return this.IsNull(this.tableGContent.GenreKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenreKeyNull() {
                this[this.tableGContent.GenreKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableGContent.TitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableGContent.TitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesNumberNull() {
                return this.IsNull(this.tableGContent.SeriesNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesNumberNull() {
                this[this.tableGContent.SeriesNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubtitleNull() {
                return this.IsNull(this.tableGContent.SubtitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubtitleNull() {
                this[this.tableGContent.SubtitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSummaryHtmlNull() {
                return this.IsNull(this.tableGContent.SummaryHtmlColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSummaryHtmlNull() {
                this[this.tableGContent.SummaryHtmlColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDurationValueNull() {
                return this.IsNull(this.tableGContent.DurationValueColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDurationValueNull() {
                this[this.tableGContent.DurationValueColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeadlineTextNull() {
                return this.IsNull(this.tableGContent.DeadlineTextColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeadlineTextNull() {
                this[this.tableGContent.DeadlineTextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GGenreRowChangeEvent : System.EventArgs {
            
            private GGenreRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GGenreRowChangeEvent(GGenreRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GGenreRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GPackageRowChangeEvent : System.EventArgs {
            
            private GPackageRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPackageRowChangeEvent(GPackageRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GPackageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GContentRowChangeEvent : System.EventArgs {
            
            private GContentRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GContentRowChangeEvent(GContentRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GContentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591